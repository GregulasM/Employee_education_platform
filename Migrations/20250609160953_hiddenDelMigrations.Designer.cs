// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eep_backend;

#nullable disable

namespace eep_backend.Migrations
{
    [DbContext(typeof(SiteDbContext))]
    [Migration("20250609160953_hiddenDelMigrations")]
    partial class hiddenDelMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_articles_module_id");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("Position")
                        .HasColumnType("double precision")
                        .HasColumnName("position");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_courses_department_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_courses_user_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_links");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_links_course_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_links_parent_id");

                    b.ToTable("links", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("Order")
                        .HasColumnType("double precision")
                        .HasColumnName("order");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_modules");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_modules_course_id");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Questions")
                        .HasColumnType("jsonb")
                        .HasColumnName("questions");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tests_course_id");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_tests_module_id");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answers")
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer")
                        .HasColumnName("test_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_test_results");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_test_results_test_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_test_results_user_id");

                    b.ToTable("test_results", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ListId")
                        .HasColumnType("integer")
                        .HasColumnName("list_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("Points")
                        .HasColumnType("double precision")
                        .HasColumnName("points");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_achievements");

                    b.HasIndex("ListId")
                        .HasDatabaseName("ix_achievements_list_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_achievements_user_id");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.AchievementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double?>("SortType")
                        .HasColumnType("double precision")
                        .HasColumnName("sort_type");

                    b.HasKey("Id")
                        .HasName("pk_achievement_lists");

                    b.ToTable("achievement_lists", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("BaseStats")
                        .HasColumnType("jsonb")
                        .HasColumnName("base_stats");

                    b.Property<string>("Cosmetics")
                        .HasColumnType("jsonb")
                        .HasColumnName("cosmetics");

                    b.Property<bool?>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Rarity")
                        .HasColumnType("text")
                        .HasColumnName("rarity");

                    b.Property<string>("Skills")
                        .HasColumnType("jsonb")
                        .HasColumnName("skills");

                    b.Property<string>("UnlockCond")
                        .HasColumnType("text")
                        .HasColumnName("unlock_cond");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.UserCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CustomStats")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_stats");

                    b.Property<double>("Experience")
                        .HasColumnType("double precision")
                        .HasColumnName("experience");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_characters");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("ix_user_characters_character_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_characters_user_id");

                    b.ToTable("user_characters", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("NewsId")
                        .HasColumnType("integer")
                        .HasColumnName("news_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_comments_news_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Excerpt")
                        .HasColumnType("text")
                        .HasColumnName("excerpt");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pinned");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_news_author_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_news_slug");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("text")
                        .HasColumnName("day_of_week");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Teacher")
                        .HasColumnType("text")
                        .HasColumnName("teacher");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("text")
                        .HasColumnName("time_slot");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_schedules_course_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_schedules_department_id");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_schedules_module_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_schedules_user_id");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("jsonb")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("active_course_id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int?>("FontId")
                        .HasColumnType("integer")
                        .HasColumnName("font_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("SecondName")
                        .HasColumnType("text")
                        .HasColumnName("second_name");

                    b.Property<int?>("SelectedCharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("selected_character_id");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("integer")
                        .HasColumnName("theme_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ActiveCourseId")
                        .HasDatabaseName("ix_users_active_course_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("FontId")
                        .HasDatabaseName("ix_users_font_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_users_login");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.HasIndex("SelectedCharacterId")
                        .HasDatabaseName("ix_users_selected_character_id");

                    b.HasIndex("ThemeId")
                        .HasDatabaseName("ix_users_theme_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Article", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("fk_articles_modules_module_id");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Course", b =>
                {
                    b.HasOne("eep_backend.Models.UserModuleModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_courses_departments_department_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", null)
                        .WithMany("ChosenCourses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_courses_users_user_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Link", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Course", "Course")
                        .WithMany("UsefulLinks")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_links_courses_course_id");

                    b.HasOne("eep_backend.Models.CourseModuleModels.Link", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_links_links_parent_id");

                    b.Navigation("Course");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Module", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_modules_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Test", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tests_courses_course_id");

                    b.HasOne("eep_backend.Models.CourseModuleModels.Module", "Module")
                        .WithMany("Tests")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("fk_tests_modules_module_id");

                    b.Navigation("Course");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.TestResult", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .HasConstraintName("fk_test_results_tests_test_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_test_results_users_user_id");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.Achievement", b =>
                {
                    b.HasOne("eep_backend.Models.GameModuleModels.AchievementList", "List")
                        .WithMany("Achievements")
                        .HasForeignKey("ListId")
                        .HasConstraintName("fk_achievements_achievement_lists_list_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", null)
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_achievements_users_user_id");

                    b.Navigation("List");
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.UserCharacter", b =>
                {
                    b.HasOne("eep_backend.Models.GameModuleModels.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_characters_characters_character_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", "User")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_characters_users_user_id");

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Comment", b =>
                {
                    b.HasOne("eep_backend.Models.UserModuleModels.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .HasConstraintName("fk_comments_news_news_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("News");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.News", b =>
                {
                    b.HasOne("eep_backend.Models.UserModuleModels.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_news_users_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Schedule", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_schedules_courses_course_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_schedules_departments_department_id");

                    b.HasOne("eep_backend.Models.CourseModuleModels.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("fk_schedules_modules_module_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_schedules_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.User", b =>
                {
                    b.HasOne("eep_backend.Models.CourseModuleModels.Course", "ActiveCourse")
                        .WithMany()
                        .HasForeignKey("ActiveCourseId")
                        .HasConstraintName("fk_users_courses_active_course_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.Setting", "Font")
                        .WithMany()
                        .HasForeignKey("FontId")
                        .HasConstraintName("fk_users_settings_font_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_users_user_roles_role_id");

                    b.HasOne("eep_backend.Models.GameModuleModels.Character", "SelectedCharacter")
                        .WithMany()
                        .HasForeignKey("SelectedCharacterId")
                        .HasConstraintName("fk_users_characters_selected_character_id");

                    b.HasOne("eep_backend.Models.UserModuleModels.Setting", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("fk_users_settings_theme_id");

                    b.Navigation("ActiveCourse");

                    b.Navigation("Department");

                    b.Navigation("Font");

                    b.Navigation("Role");

                    b.Navigation("SelectedCharacter");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Course", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("UsefulLinks");
                });

            modelBuilder.Entity("eep_backend.Models.CourseModuleModels.Module", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("eep_backend.Models.GameModuleModels.AchievementList", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("ChosenCourses");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("eep_backend.Models.UserModuleModels.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
